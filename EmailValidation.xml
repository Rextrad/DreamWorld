<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EmailValidation</name>
    </assembly>
    <members>
        <member name="T:EmailValidation.EmailAttribute">
            <summary>
            An attribute that validates the syntax of an email address.
            </summary>
            <remarks>
            An attribute that validates the syntax of an email address.
            </remarks>
        </member>
        <member name="M:EmailValidation.EmailAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Instantiates a new instance of <see cref="T:EmailValidation.EmailAttribute"/>.
            </summary>
            <remarks>
            Creates a new <see cref="T:EmailValidation.EmailAttribute"/>.
            </remarks>
            <param name="allowTopLevelDomains"><c>true</c> if the validator should allow addresses at top-level domains; otherwise, <c>false</c>.</param>
            <param name="allowInternational"><c>true</c> if the validator should allow international characters; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:EmailValidation.EmailAttribute.AllowTopLevelDomains">
            <summary>
            Get or set whether or not the validator should allow top-level domains.
            </summary>
            <remarks>
            Gets or sets whether or not the validator should allow top-level domains.
            </remarks>
            <value><c>true</c> if top-level domains should be allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EmailValidation.EmailAttribute.AllowInternational">
            <summary>
            Get or set whether or not the validator should allow international characters.
            </summary>
            <remarks>
            Gets or sets whether or not the validator should allow international characters.
            </remarks>
            <value><c>true</c> if international characters should be allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:EmailValidation.EmailAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the value.
            </summary>
            <remarks>
            Checks whether or not the email address provided is syntactically correct.
            </remarks>
            <returns>The validation result.</returns>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
        </member>
        <member name="M:EmailValidation.EmailAttribute.IsValid(System.Object)">
            <summary>
            Validates the value.
            </summary>
            <remarks>
            Checks whether or not the email address provided is syntactically correct.
            </remarks>
            <returns><c>true</c> if the value is a valid email address; otherwise, <c>false</c>.</returns>
            <param name="value">The value to validate.</param>
        </member>
        <member name="T:EmailValidation.EmailValidator">
            <summary>
            An Email validator.
            </summary>
            <remarks>
            An Email validator.
            </remarks>
        </member>
        <member name="M:EmailValidation.EmailValidator.Validate(System.String,System.Boolean,System.Boolean)">
            <summary>
            Validate the specified email address.
            </summary>
            <remarks>
            <para>Validates the syntax of an email address.</para>
            <para>If <paramref name="allowTopLevelDomains"/> is <c>true</c>, then the validator will
            allow addresses with top-level domains like <c>postmaster@dk</c>.</para>
            <para>If <paramref name="allowInternational"/> is <c>true</c>, then the validator
            will use the newer International Email standards for validating the email address.</para>
            </remarks>
            <returns><c>true</c> if the email address is valid; otherwise, <c>false</c>.</returns>
            <param name="email">An email address.</param>
            <param name="allowTopLevelDomains"><c>true</c> if the validator should allow addresses at top-level domains; otherwise, <c>false</c>.</param>
            <param name="allowInternational"><c>true</c> if the validator should allow international characters; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="email"/> is <c>null</c>.
            </exception>
        </member>
    </members>
</doc>
